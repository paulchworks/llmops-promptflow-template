@Library('shared-library') _
pipeline {
    agent any
    parameters {
        string(name: 'use_case_base_path', defaultValue: 'named_entity_recognition', description: 'The flow use-case to execute')
        string(name: 'deploy_environment', defaultValue: 'dev', description: 'Execution Environment')
        string(name: 'env_vars', description: 'The API key for authentication')
    }

    environment {
        registry_details = credentials('DOCKER_IMAGE_REGISTRY')
    }

    stages {

    stage('Setup Environment') {

            steps {
                script {
                    // Read env_vars content
                    def envFileContent = params.env_vars.trim()

                    // Split content into lines
                    def lines = envFileContent.readLines()

                    // Iterate through each line
                    lines.each { line ->
                        // Split line by '=' to get key and value
                        def (key, value) = line.split('=')


                        // Set environment variable
                        env."$key" = value
                    }
                }
            }
        }

    // Create .env file again for verification
        stage('Load .env file') {
            steps {
                script {
                    // Ensure the workspace directory is writable
                    sh 'chmod -R 777 $WORKSPACE'

                    // Use the secret file credentials
                    withCredentials([file(credentialsId: 'ENV_VARS', variable: 'ENV_FILE')]) {
                        // Check if the secret file exists and read its content
                        sh 'ls -l $ENV_FILE'
                        def envContent = readFile(file: ENV_FILE)

                        // Write the content to .env file in the workspace
                        writeFile file: '.env', text: envContent

                        // Check if the .env file was created
                        sh 'ls -l .env'

                        // Optionally, load the .env file using Python
                        def loadEnvScript = """
import os
from dotenv import load_dotenv

# Load the .env file
load_dotenv('.env')


                        """

                        // Execute the Python script
                        writeFile file: 'load_env.py', text: loadEnvScript
                        sh 'python3 load_env.py'
                    }
                }
            }
        }

    // Create local promptflow connections
    stage('Create local promptflow connections') {
        steps {
            installRequirements('execute_job_requirements')
            installRequirements('build_validation_requirements')
            withCredentials([azureServicePrincipal('AZURE_CREDENTIALS')]) {
                withPythonEnv('/usr/bin/python3.9') {
                sh '''
                python -m llmops.common.prompt_local_connections \\
                    --base_path ${use_case_base_path} \\
                    --env_name ${deploy_environment}
                '''
            }
        }
        }
    }


    // Create Docker image and push to Azure Container Registry
    stage('Create Docker Image') {
            steps {
                installRequirements('build_validation_requirements')
                withCredentials([string(credentialsId: 'DOCKER_IMAGE_REGISTRY', variable: 'registry_details')]) {
                withPythonEnv('/usr/bin/python3.9') {
                    sh """
                        # Your Docker image creation command here
                        echo "build no script:"
                        echo ${BUILD_NUMBER}
                        #!/bin/bash
                        ./llmops/common/scripts/gen_docker_image.sh --use_case_base_path $use_case_base_path --deploy_environment $deploy_environment --build_id ${BUILD_NUMBER} --REGISTRY_DETAILS '${registry_details}'
                    """
                    }
                }
            }
        }

        // Deploy Docker image to Azure Webapp
        stage('Create Webapp') {
            steps {
                    sh """
                    /bin/bash ./llmops/common/scripts/az_webapp_deploy.sh --use_case_base_path $use_case_base_path --deploy_environment $deploy_environment --build_id ${BUILD_NUMBER}
                    """
            }
        }
    }
}